@* 
  @model lowercase m to specify the data type of the view model
  @Model capital m to access the data
*@
@model List<Post>

<h2 class="text-center">All Posts</h2>
<hr>

@foreach (Post post in Model)
{
  @* we can create vars before writing HTML *@
  bool alreadyUpvoted = post.Votes.Any(vote => vote.UserId == Context.Session.GetInt32("UserId") && vote.IsUpvote);
  bool alreadyDownvoted = post.Votes.Any(vote => vote.UserId == Context.Session.GetInt32("UserId") && vote.IsUpvote == false);
  
    <div class="card mx-auto text-center mb-3 w-50">
      <div class="card-header">
        <h5 class="card-title">
          @post.Topic
        </h5>
      </div>

      <div class="card-body">
        <h6 class="card-subtitle mb-2 text-muted">
          <a asp-controller="Home" asp-action="Profile" asp-route-id="@post.Author.UserId">
            by: @post.Author.FullName()
          </a>
        </h6>
        <p class="card-text">
          @post.Body
        </p>
        @if (post.ImgUrl != null)
        {
          <img class="w-100" src="@post.ImgUrl" alt="Post">
        }
      </div>

      <div class="card-footer">
        <div class="row justify-content-center">
          
          @* Upvote: passing all info as URL parameters, the only reason we can do this is because we don't need user to fill in any input boxes *@
          <form
            method="POST"
            asp-controller="Posts"
            asp-action="Vote"
            asp-route-isUpvote="@true"
            asp-route-postId="@post.PostId"
            asp-route-userId="@Context.Session.GetInt32("UserId")"
          >
            <span class="text-success">@post.Votes.Where(vote => vote.IsUpvote == true).ToList().Count</span>
            <button disabled="@alreadyUpvoted" class="btn btn-link text-success">
              <span class="h1">&uarr;</span>
            </button>
          </form>

          @* Downvote: passing all info as URL parameters, the only reason we can do this is because we don't need user to fill in any input boxes *@
          <form
            method="POST"
            asp-controller="Posts"
            asp-action="Vote"
            asp-route-isUpvote="@false"
            asp-route-postId="@post.PostId"
            asp-route-userId="@Context.Session.GetInt32("UserId")"
          >
            <button disabled="@alreadyDownvoted" class="btn btn-link text-danger">
              <span class="h1">&darr;</span>
            </button>
            <span class="text-danger">@post.Votes.Where(vote => vote.IsUpvote == false).ToList().Count</span>
          </form>

          @* Second technique, uncomment below: Upvote: using partial view and view model  *@
          @* @{
            Vote newVote = new Vote()
            {
              PostId = post.PostId,
              UserId = (int)Context.Session.GetInt32("UserId"),
              IsUpvote = true
            };
          }
          <partial name="_Vote" model="@newVote"></partial> *@
        </div>
        
        @* asp-route-paramName=@paramValue *@
        <a 
          asp-controller="Posts"
          asp-action="Details"
          asp-route-id="@post.PostId"
          class="btn btn-info">
          View Details
        </a>
        <a 
          asp-controller="Posts"
          asp-action="Edit"
          asp-route-id="@post.PostId"
          class="btn btn-warning">
          Edit
        </a>
        <a 
          asp-controller="Posts"
          asp-action="Delete"
          asp-route-id="@post.PostId"
          class="btn btn-danger">
          Delete
        </a>
        @* without tag helpers the href will not update if you change the url in the controller *@
        @* <a 
          href="/posts/@post.PostId"
          class="btn btn-info">
          View Details
        </a> *@
      </div>
    </div>
}
